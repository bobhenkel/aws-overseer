---
- name: Ensure deb dependencies are installed.
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items:
    - python-pip
    - python-dev
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: Ensure yum dependencies are installed.
  yum:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items:
    - python-pip
    - python-devel
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Amazon'

- name: Ensure python dependencies are installed.
  pip:
    name: "{{ item }}"
    state: present
  with_items:
    - ansible
    - boto

- name: Ensure the overseer group exists.
  group:
    name: overseer
    state: present

- name: Ensure the overseer user exists.
  user:
    name: overseer
    group: overseer
    home: "{{ overseer_home }}"
    createhome: yes
    move_home: yes
    state: present

- name: Ensure necessary directories for overseer are created.
  file:
    path: "{{ overseer_home }}/{{ item }}"
    state: directory
    owner: overseer
    group: overseer
    recurse: yes
  with_items:
    - library

- name: Ensure start-stop-schedule playbooks are in place for overseer.
  template:
    src: "{{ item }}.j2"
    dest: "{{ overseer_home }}/{{ item }}"
    owner: overseer
    group: overseer
  with_items:
    - start-instances.yml
    - stop-instances.yml

- name: Ensure the ec2 module will work with tags.
  get_url:
    url: https://raw.githubusercontent.com/wtcross/ansible-modules-core/ec2-start-stop-by-tag/cloud/amazon/ec2.py
    dest: "{{ overseer_home }}/library/ec2.py"
    owner: overseer
    group: overseer
    force: yes

- name: Ensure there is a crontab in /etc/cron.d for each start_stop_schedule
  template:
    src: start-stop-schedule.j2
    dest: "{{ '/etc/cron.d/overseer-' ~ overseer_name ~ '-start-stop-schedule-' ~ item.schedule_name | regex_replace('[\\']+', '') | regex_replace('[^-a-z0-9]+', '-') | regex_replace('-{2,}', '-') | lower | trim }}"
  with_items: overseer_start_stop_schedules

- name: Build a list of the managed crontabs for overseer.
  shell: "echo -e \"{% for item in overseer_start_stop_schedules %}{{ '/etc/cron.d/overseer-' ~ overseer_name ~ '-start-stop-schedule-' ~ item.schedule_name | regex_replace('[\\']+', '') | regex_replace('[^-a-z0-9]+', '-') | regex_replace('-{2,}', '-') | lower | trim }}\n{% endfor %}\""
  register: overseer_crontabs

- name: Get a list of crontabs in /etc/cron.d for overseer.
  shell: "find /etc/cron.d -name overseer-*"
  register: crontab_find

- name: Ensure that overseer crontabs not in configuration are removed.
  file:
    path: "{{ item }}"
    state: absent
  with_items: "{{ crontab_find.stdout_lines | difference(overseer_crontabs.stdout_lines) }}"
